Project Instructions
Overview
Follow these instructions to complete the project and pass all the user stories below. Create your database and tables, and implement the required functionality in your script. Get creative and have fun!

Database Setup
Logging into psql
Log in to psql with the following command:
bash
Copy
Edit
psql --username=freecodecamp --dbname=postgres
Querying the Database
You can query your database using:
bash
Copy
Edit
psql --username=freecodecamp --dbname=salon -c "SQL QUERY HERE"
Add additional flags as needed.
Creating and Connecting to the Database
Create your database and connect to it before adding any tables.
Hints
Your script needs to complete all tasks for the tests to pass.
Avoid using clear or any command that might erase the script output.
Refer to examples.txt for an example of a passing script output.
Test data might be added to your database; feel free to delete it after testing.
Notes on Data Persistence
If you leave your virtual machine, your database might not be saved.
You can make a dump of your database with the following command:
bash
Copy
Edit
pg_dump -cC --inserts -U freecodecamp salon > salon.sql
This command will save the database commands in salon.sql, located in the directory where you executed the command.
Rebuilding the Database
To rebuild the database, use:
bash
Copy
Edit
psql -U postgres < salon.sql
Saving Progress on freeCodeCamp.org
After passing all tests, save a dump of your database as instructed above.
Save the salon.sql file and the final version of your salon.sh file in a public repository.
Submit the URL to your repository on freeCodeCamp.org.
Tasks to Complete
Database Creation
Create a database named salon.
Table Creation
Connect to your database and create the following tables:

customers
appointments
services
Table Requirements:

Each table should have a primary key column that auto-increments.
Primary key columns should follow the naming convention table_name_id (e.g., customer_id for customers).
Foreign Key Constraints:

The appointments table should have:
A customer_id foreign key referencing customer_id in the customers table.
A service_id foreign key referencing service_id in the services table.
Column Specifications:

The customers table should have a phone column of type VARCHAR that is unique.
The customers and services tables should have a name column.
The appointments table should have a time column of type VARCHAR.
Data Population:

Add at least three rows to the services table, including one with a service_id of 1.
Script Requirements
Script File:

Create a script file named salon.sh in the project folder.
Include a shebang (#!/bin/bash) at the top of the file.
Ensure the script has executable permissions.
Script Behavior:

Do not use the clear command in your script.
Display a numbered list of services before the first prompt, e.g., 1) cut.
User Interaction:

If a non-existent service is selected, display the list of services again.
Prompt users for the following inputs and store them in respective variables:
SERVICE_ID_SELECTED
CUSTOMER_PHONE
CUSTOMER_NAME
SERVICE_TIME
Database Operations:

If the phone number doesn't exist in the customers table, prompt for the customer's name and insert the new customer into the table.
Insert a new appointment into the appointments table with the correct customer_id and service_id.
Example Scenarios
New Customer Appointment:

Input: 1, 555-555-5555, Fabio, 10:30
Expected Result: A new row in appointments for Fabio with service_id 1.
Existing Customer Appointment:

Input: 2, 555-555-5555, 11am
Expected Result: A new row in appointments for the existing customer with service_id 2.
Complete these tasks to successfully finish the project!
